AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  ProjectName:
    Type: String
    Description: Name for the project
    Default: poc-aws-lambda-js
  Runtime:
    Type: String
    Description: The runtime environment for the lambda function
    Default: nodejs14.x
  Environment:
    Type: String
    Description: Name of the environment
    Default: Development

  LambdaFunctionName:
    Type: String
    Description: Name for the Lambda function
    Default: poc-aws-lambda-js
    AllowedPattern: "([A-Za-z0-9_+=,.@-]){0,50}" # max 64 characters for role
  DynamoDBTableName:
    Type: String
    Description: Name for the DynamoDB table
    Default: pocAwsLambdaJsStore
    MinLength: "3"
    MaxLength: "255"
    AllowedPattern: "[a-zA-Z0-9_.-]+"
  S3BucketName:
    # Bucket naming rules https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucketnamingrules.html
    Type: String
    Description: Name for the S3 Bucket with the application code
    Default: poc-aws-lambda-js-bucket
    MinLength: "3"
    MaxLength: "63"

Resources:

  # This S3 bucket needs to match the S3 bucket in `s3.yaml`
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${LambdaFunctionName}-bucket'
      AccessControl: Private
      VersioningConfiguration:
        Status: Enabled

  DynamoDBTable:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-dynamodb-table.html
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref DynamoDBTableName
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: studentId
          AttributeType: S
      KeySchema:
        # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-dynamodb-table-keyschema.html
        - AttributeName: studentId
          KeyType: HASH
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  LambdaFunctionRole:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaFunctionRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${LambdaFunctionName}:*'
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:Query
                Resource: !GetAtt DynamoDBTable.Arn
      RoleName: !Sub "${LambdaFunctionName}-role"
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  LambdaFunction:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-function.html
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub "arn:aws:s3:::${S3BucketName}"
        S3Key: app.zip # This needs to match the ZIP file name in GitHub Action
      Description: A proof of concept AWS Lambda function
      FunctionName: !Ref LambdaFunctionName
      Handler: index.handler
      Role: !GetAtt LambdaFunctionRole.Arn
      Runtime: !Ref Runtime # TODO: Upgrade to NodeJS v18
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

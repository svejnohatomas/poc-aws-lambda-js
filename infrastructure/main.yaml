AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  ProjectName:
    Type: String
    Description: Name for the project
    Default: poc-aws-lambda-js
  Runtime:
    Type: String
    Description: The runtime environment for the lambda function
    Default: nodejs16.x
  Environment:
    Type: String
    Description: Name of the environment
    Default: Development

  LambdaFunctionName:
    Type: String
    Description: Name for the Lambda function
    Default: poc-aws-lambda-js
    AllowedPattern: "([A-Za-z0-9_+=,.@-]){0,50}" # max 64 characters for role
  DynamoDBTableName:
    Type: String
    Description: Name for the DynamoDB table
    Default: pocAwsLambdaJsStore
    MinLength: "3"
    MaxLength: "255"
    AllowedPattern: "[a-zA-Z0-9_.-]+"
  S3BucketName:
    # Bucket naming rules https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucketnamingrules.html
    Type: String
    Description: Name for the S3 Bucket with the application code
    Default: poc-aws-lambda-js-bucket
    MinLength: "3"
    MaxLength: "63"

  ZIPFileName:
    Type: String
    MinLength: "1"

Resources:

  DynamoDBTable:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-dynamodb-table.html
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref DynamoDBTableName
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: university
          AttributeType: S
        - AttributeName: faculty
          AttributeType: S
      KeySchema:
        # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-dynamodb-table-keyschema.html
        - AttributeName: university
          KeyType: HASH
        - AttributeName: faculty
          KeyType: RANGE
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  LambdaFunctionRole:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaFunctionRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${LambdaFunctionName}:*'
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:Query
                Resource: !GetAtt DynamoDBTable.Arn
      RoleName: !Sub "${LambdaFunctionName}-role"
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  LambdaFunction:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-function.html
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: !Sub "${ZIPFileName}.zip" # This needs to match the ZIP file name in GitHub Action
      Description: A proof of concept AWS Lambda function
      FunctionName: !Ref LambdaFunctionName
      Handler: index.handler
      Role: !GetAtt LambdaFunctionRole.Arn
      Runtime: !Ref Runtime
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  LambdaPermission:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-permission.html
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunctionUrl"
      FunctionName: !GetAtt LambdaFunction.Arn
      FunctionUrlAuthType: NONE
      Principal: "*"

  LambdaFunctionUrl:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-url.html
    Type: AWS::Lambda::Url
    Properties:
      AuthType: NONE
      Cors:
        AllowOrigins:
          - "*"
        AllowMethods:
          - "GET"
      TargetFunctionArn: !GetAtt LambdaFunction.Arn
  
  CloudWatchDashboard:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-dashboard.html
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Ref ProjectName
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "height": 6,
              "width": 6,
              "y": 0,
              "x": 0,
              "type": "metric",
              "properties": {
                "period": 60,
                "metrics": [
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${LambdaFunctionName}", { "stat": "Sum" } ]
                ],
                "region": "${AWS::Region}",
                "title": "Lambda Invocations",
                "view": "timeSeries",
                "stacked": false
              }
            },
            {
              "height": 6,
              "width": 6,
              "y": 0,
              "x": 6,
              "type": "metric",
              "properties": {
                "view": "timeSeries",
                "stacked": false,
                "metrics": [
                  [ "AWS/Lambda", "Errors", "FunctionName", "${LambdaFunctionName}" ],
                  [ ".", "Url4xxCount", ".", "." ],
                  [ ".", "Url5xxCount", ".", "." ]
                ],
                "region": "${AWS::Region}",
                "title": "Lambda Errors"
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 6,
              "height": 6,
              "properties": {
                "view": "timeSeries",
                "stacked": false,
                "metrics": [
                  [ "AWS/Lambda", "UrlRequestLatency", "FunctionName", "${LambdaFunctionName}" ]
                ],
                "region": "${AWS::Region}",
                "title": "Lambda Latency"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 6,
              "height": 6,
              "properties": {
                "view": "timeSeries",
                "stacked": false,
                "metrics": [
                  [ "AWS/DynamoDB", "ConsumedWriteCapacityUnits", "TableName", "${DynamoDBTableName}" ],
                  [ ".", "ConsumedReadCapacityUnits", ".", "." ]
                ],
                "region": "${AWS::Region}",
                "title": "DynamoDB Consumed RW CapacityUnits"
              }
            },
            {
              "type": "metric",
              "x": 6,
              "y": 6,
              "width": 6,
              "height": 6,
              "properties": {
                "view": "timeSeries",
                "stacked": false,
                "metrics": [
                  [ "AWS/DynamoDB", "UserErrors" ]
                ],
                "region": "${AWS::Region}",
                "title": "DynamoDB User Errors",
                "setPeriodToTimeRange": true
              }
            }
          ]
        }

Outputs:
  LambdaUrl:
    Description: The URL of the deployed Lambda function
    Value: !GetAtt LambdaFunctionUrl.FunctionUrl